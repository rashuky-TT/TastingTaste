#ifndef GENERATED_ASN1SCC_dataview_uniq_H
#define GENERATED_ASN1SCC_dataview_uniq_H
/*
Code automatically generated by asn1scc tool
*/
#include "asn1crt.h"
#include "asn1crt_encoding.h"


#ifdef  __cplusplus
extern "C" {
#endif


typedef asn1Real PITCH_VALUE;


flag PITCH_VALUE_Equal(const PITCH_VALUE* pVal1, const PITCH_VALUE* pVal2);

void PITCH_VALUE_Initialize(PITCH_VALUE* pVal);

#define ERR_PITCH_VALUE		1  /**/
flag PITCH_VALUE_IsConstraintValid(const PITCH_VALUE* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PITCH_VALUE		2  /**/
#define PITCH_VALUE_REQUIRED_BYTES_FOR_ENCODING       13 
#define PITCH_VALUE_REQUIRED_BITS_FOR_ENCODING        104

flag PITCH_VALUE_Encode(const PITCH_VALUE* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PITCH_VALUE		3  /**/
flag PITCH_VALUE_Decode(PITCH_VALUE* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PITCH_VALUE		4  /**/
#define PITCH_VALUE_REQUIRED_BYTES_FOR_ACN_ENCODING       13 
#define PITCH_VALUE_REQUIRED_BITS_FOR_ACN_ENCODING        104

flag PITCH_VALUE_ACN_Encode(const PITCH_VALUE* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PITCH_VALUE		5  /**/
flag PITCH_VALUE_ACN_Decode(PITCH_VALUE* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint RESOLUTION;


flag RESOLUTION_Equal(const RESOLUTION* pVal1, const RESOLUTION* pVal2);

void RESOLUTION_Initialize(RESOLUTION* pVal);

#define ERR_RESOLUTION		6  /**/
flag RESOLUTION_IsConstraintValid(const RESOLUTION* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_RESOLUTION		7  /**/
#define RESOLUTION_REQUIRED_BYTES_FOR_ENCODING       1 
#define RESOLUTION_REQUIRED_BITS_FOR_ENCODING        3

flag RESOLUTION_Encode(const RESOLUTION* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_RESOLUTION		8  /**/
flag RESOLUTION_Decode(RESOLUTION* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_RESOLUTION		9  /**/
#define RESOLUTION_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define RESOLUTION_REQUIRED_BITS_FOR_ACN_ENCODING        3

flag RESOLUTION_ACN_Encode(const RESOLUTION* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_RESOLUTION		10  /**/
flag RESOLUTION_ACN_Decode(RESOLUTION* pVal, BitStream* pBitStrm, int* pErrCode);
typedef enum {
    valid = 0,
    invalid = 1
} VALIDITY;

// please use the following macros to avoid breaking code.
#define VALIDITY_valid valid
#define VALIDITY_invalid invalid

flag VALIDITY_Equal(const VALIDITY* pVal1, const VALIDITY* pVal2);

void VALIDITY_Initialize(VALIDITY* pVal);

#define ERR_VALIDITY		11  /**/
flag VALIDITY_IsConstraintValid(const VALIDITY* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_VALIDITY		12  /**/
#define VALIDITY_REQUIRED_BYTES_FOR_ENCODING       1 
#define VALIDITY_REQUIRED_BITS_FOR_ENCODING        1

flag VALIDITY_Encode(const VALIDITY* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_VALIDITY		13  /**/
flag VALIDITY_Decode(VALIDITY* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_VALIDITY		14  /**/
#define VALIDITY_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define VALIDITY_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag VALIDITY_ACN_Encode(const VALIDITY* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_VALIDITY		15  /**/
flag VALIDITY_ACN_Decode(VALIDITY* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- PITCH_SEQ --------------------------------------------*/
typedef struct {
    PITCH_VALUE pitchVal;
    RESOLUTION res;
    VALIDITY vali;

} PITCH_SEQ;

flag PITCH_SEQ_Equal(const PITCH_SEQ* pVal1, const PITCH_SEQ* pVal2);

void PITCH_SEQ_Initialize(PITCH_SEQ* pVal);

#define ERR_PITCH_SEQ		46  /**/
#define ERR_PITCH_SEQ_PITCHVAL_2		21  /**/
#define ERR_PITCH_SEQ_RES_2		31  /**/
#define ERR_PITCH_SEQ_VALI_2		41  /**/
flag PITCH_SEQ_IsConstraintValid(const PITCH_SEQ* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_PITCH_SEQ		47  /**/
#define ERR_UPER_ENCODE_PITCH_SEQ_PITCHVAL_2		22  /**/
#define ERR_UPER_ENCODE_PITCH_SEQ_RES_2		32  /**/
#define ERR_UPER_ENCODE_PITCH_SEQ_VALI_2		42  /**/
#define PITCH_SEQ_REQUIRED_BYTES_FOR_ENCODING       14 
#define PITCH_SEQ_REQUIRED_BITS_FOR_ENCODING        108

flag PITCH_SEQ_Encode(const PITCH_SEQ* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_PITCH_SEQ		48  /**/
#define ERR_UPER_DECODE_PITCH_SEQ_PITCHVAL_2		23  /**/
#define ERR_UPER_DECODE_PITCH_SEQ_RES_2		33  /**/
#define ERR_UPER_DECODE_PITCH_SEQ_VALI_2		43  /**/
flag PITCH_SEQ_Decode(PITCH_SEQ* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_PITCH_SEQ		49  /**/
#define ERR_ACN_ENCODE_PITCH_SEQ_PITCHVAL_2		24  /**/
#define ERR_ACN_ENCODE_PITCH_SEQ_RES_2		34  /**/
#define ERR_ACN_ENCODE_PITCH_SEQ_VALI_2		44  /**/
#define PITCH_SEQ_REQUIRED_BYTES_FOR_ACN_ENCODING       14 
#define PITCH_SEQ_REQUIRED_BITS_FOR_ACN_ENCODING        108

flag PITCH_SEQ_ACN_Encode(const PITCH_SEQ* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_PITCH_SEQ		50  /**/
#define ERR_ACN_DECODE_PITCH_SEQ_PITCHVAL_2		25  /**/
#define ERR_ACN_DECODE_PITCH_SEQ_RES_2		35  /**/
#define ERR_ACN_DECODE_PITCH_SEQ_VALI_2		45  /**/
flag PITCH_SEQ_ACN_Decode(PITCH_SEQ* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint MyInteger;


flag MyInteger_Equal(const MyInteger* pVal1, const MyInteger* pVal2);

void MyInteger_Initialize(MyInteger* pVal);

#define ERR_MYINTEGER		51  /**/
flag MyInteger_IsConstraintValid(const MyInteger* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_MYINTEGER		52  /**/
#define MyInteger_REQUIRED_BYTES_FOR_ENCODING       2 
#define MyInteger_REQUIRED_BITS_FOR_ENCODING        14

flag MyInteger_Encode(const MyInteger* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_MYINTEGER		53  /**/
flag MyInteger_Decode(MyInteger* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_MYINTEGER		54  /**/
#define MyInteger_REQUIRED_BYTES_FOR_ACN_ENCODING       2 
#define MyInteger_REQUIRED_BITS_FOR_ACN_ENCODING        14

flag MyInteger_ACN_Encode(const MyInteger* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_MYINTEGER		55  /**/
flag MyInteger_ACN_Decode(MyInteger* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint T_Int32;


flag T_Int32_Equal(const T_Int32* pVal1, const T_Int32* pVal2);

void T_Int32_Initialize(T_Int32* pVal);

#define ERR_T_INT32		56  /**/
flag T_Int32_IsConstraintValid(const T_Int32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT32		57  /**/
#define T_Int32_REQUIRED_BYTES_FOR_ENCODING       4 
#define T_Int32_REQUIRED_BITS_FOR_ENCODING        32

flag T_Int32_Encode(const T_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT32		58  /**/
flag T_Int32_Decode(T_Int32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT32		59  /**/
#define T_Int32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define T_Int32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag T_Int32_ACN_Encode(const T_Int32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT32		60  /**/
flag T_Int32_ACN_Decode(T_Int32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt32;


flag T_UInt32_Equal(const T_UInt32* pVal1, const T_UInt32* pVal2);

void T_UInt32_Initialize(T_UInt32* pVal);

#define ERR_T_UINT32		61  /**/
flag T_UInt32_IsConstraintValid(const T_UInt32* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT32		62  /**/
#define T_UInt32_REQUIRED_BYTES_FOR_ENCODING       4 
#define T_UInt32_REQUIRED_BITS_FOR_ENCODING        32

flag T_UInt32_Encode(const T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT32		63  /**/
flag T_UInt32_Decode(T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT32		64  /**/
#define T_UInt32_REQUIRED_BYTES_FOR_ACN_ENCODING       4 
#define T_UInt32_REQUIRED_BITS_FOR_ACN_ENCODING        32

flag T_UInt32_ACN_Encode(const T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT32		65  /**/
flag T_UInt32_ACN_Decode(T_UInt32* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccSint T_Int8;


flag T_Int8_Equal(const T_Int8* pVal1, const T_Int8* pVal2);

void T_Int8_Initialize(T_Int8* pVal);

#define ERR_T_INT8		66  /**/
flag T_Int8_IsConstraintValid(const T_Int8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_INT8		67  /**/
#define T_Int8_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_Int8_REQUIRED_BITS_FOR_ENCODING        8

flag T_Int8_Encode(const T_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_INT8		68  /**/
flag T_Int8_Decode(T_Int8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_INT8		69  /**/
#define T_Int8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_Int8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag T_Int8_ACN_Encode(const T_Int8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_INT8		70  /**/
flag T_Int8_ACN_Decode(T_Int8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef asn1SccUint T_UInt8;


flag T_UInt8_Equal(const T_UInt8* pVal1, const T_UInt8* pVal2);

void T_UInt8_Initialize(T_UInt8* pVal);

#define ERR_T_UINT8		71  /**/
flag T_UInt8_IsConstraintValid(const T_UInt8* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_UINT8		72  /**/
#define T_UInt8_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_UInt8_REQUIRED_BITS_FOR_ENCODING        8

flag T_UInt8_Encode(const T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_UINT8		73  /**/
flag T_UInt8_Decode(T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_UINT8		74  /**/
#define T_UInt8_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_UInt8_REQUIRED_BITS_FOR_ACN_ENCODING        8

flag T_UInt8_ACN_Encode(const T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_UINT8		75  /**/
flag T_UInt8_ACN_Decode(T_UInt8* pVal, BitStream* pBitStrm, int* pErrCode);
typedef flag T_Boolean;


flag T_Boolean_Equal(const T_Boolean* pVal1, const T_Boolean* pVal2);

void T_Boolean_Initialize(T_Boolean* pVal);

#define ERR_T_BOOLEAN		76  /**/
flag T_Boolean_IsConstraintValid(const T_Boolean* pVal, int* pErrCode);

#define ERR_UPER_ENCODE_T_BOOLEAN		77  /**/
#define T_Boolean_REQUIRED_BYTES_FOR_ENCODING       1 
#define T_Boolean_REQUIRED_BITS_FOR_ENCODING        1

flag T_Boolean_Encode(const T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_UPER_DECODE_T_BOOLEAN		78  /**/
flag T_Boolean_Decode(T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);

#define ERR_ACN_ENCODE_T_BOOLEAN		79  /**/
#define T_Boolean_REQUIRED_BYTES_FOR_ACN_ENCODING       1 
#define T_Boolean_REQUIRED_BITS_FOR_ACN_ENCODING        1

flag T_Boolean_ACN_Encode(const T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

#define ERR_ACN_DECODE_T_BOOLEAN		80  /**/
flag T_Boolean_ACN_Decode(T_Boolean* pVal, BitStream* pBitStrm, int* pErrCode);
/*-- T_Null_Record --------------------------------------------*/
typedef struct {

} T_Null_Record;

flag T_Null_Record_Equal(const T_Null_Record* pVal1, const T_Null_Record* pVal2);

void T_Null_Record_Initialize(T_Null_Record* pVal);

#define ERR_T_NULL_RECORD		81  /**/
flag T_Null_Record_IsConstraintValid(const T_Null_Record* pVal, int* pErrCode);

#define T_Null_Record_REQUIRED_BYTES_FOR_ENCODING       0 
#define T_Null_Record_REQUIRED_BITS_FOR_ENCODING        0

flag T_Null_Record_Encode(const T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag T_Null_Record_Decode(T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

#define T_Null_Record_REQUIRED_BYTES_FOR_ACN_ENCODING       0 
#define T_Null_Record_REQUIRED_BITS_FOR_ACN_ENCODING        0

flag T_Null_Record_ACN_Encode(const T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode, flag bCheckConstraints);

flag T_Null_Record_ACN_Decode(T_Null_Record* pVal, BitStream* pBitStrm, int* pErrCode);

 

/* ================= Encoding/Decoding function prototypes =================
 * These functions are placed at the end of the file to make sure all types
 * have been declared first, in case of parameterized ACN encodings
 * ========================================================================= */

 


#ifdef  __cplusplus
}

#endif

#endif
