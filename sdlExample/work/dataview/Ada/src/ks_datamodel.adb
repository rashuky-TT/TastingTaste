pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
pragma Warnings (Off, "redundant with clause in body");

pragma Warnings (Off, "no entities of ""PitchTM"" are referenced");
pragma Warnings (Off, "use clause for package ""PitchTM"" has no effect");
pragma Warnings (Off, "unit ""PitchTM"" is not referenced");
with PitchTM;
pragma Warnings (On, "no entities of ""PitchTM"" are referenced");
pragma Warnings (On, "use clause for package ""PitchTM"" has no effect");
pragma Warnings (On, "unit ""PitchTM"" is not referenced");

pragma Warnings (On, "redundant with clause in body");

pragma Warnings (Off, "use clause for type");
pragma Warnings (Off, "is already use-visible through previous use_type_clause at");
use type PitchTM.asn1SccPITCH_SEQ;
use type PitchTM.asn1SccPITCH_VALUE;
use type PitchTM.asn1SccRESOLUTION;
use type PitchTM.asn1SccVALIDITY;
pragma Warnings (On, "use clause for type");
pragma Warnings (On, "is already use-visible through previous use_type_clause at");
package body Ks_Datamodel with SPARK_Mode is



pragma Warnings (Off, "condition can only be False if invalid values present");
pragma Warnings (Off, "condition can only be True if invalid values present");


function asn1SccKs_States_Equal (val1, val2 :  asn1SccKs_States) return Boolean
is

begin
	return val1 = val2;

end asn1SccKs_States_Equal;

function asn1SccKs_States_Init return asn1SccKs_States
is
    val: asn1SccKs_States;
begin
    val := asn1Scccontrol;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccKs_States_Init;

function asn1SccKs_States_IsConstraintValid(val : asn1SccKs_States) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (((val = asn1Scccontrol)) OR ((val = asn1Sccidle)));
    ret.ErrorCode := (if ret.Success then 0 else ERR_KS_STATES);
    return ret;
end asn1SccKs_States_IsConstraintValid;



function asn1SccKs_Context_Equal (val1, val2 :  asn1SccKs_Context) return Boolean
is
    pragma Warnings (Off, "initialization of ret has no effect");
    ret : Boolean := True;
    pragma Warnings (On, "initialization of ret has no effect");

begin
    ret := (val1.state = val2.state);

    if ret then
        ret := (val1.init_done = val2.init_done);

        if ret then
            ret := PitchTM.asn1SccPITCH_SEQ_Equal(val1.pitch, val2.pitch);

            if ret then
                ret := (adaasn1rtl.Asn1Real_Equal(val1.targetpitch, val2.targetpitch));

            end if;
        end if;
    end if;
	return ret;

end asn1SccKs_Context_Equal;

function asn1SccKs_Context_Init return asn1SccKs_Context
is
    val: asn1SccKs_Context;
begin

    --set state 
    val.state := asn1SccKs_States_Init;
    --set init_done 
    val.init_done := FALSE;
    --set pitch 
    val.pitch := PitchTM.asn1SccPITCH_SEQ_Init;
    --set targetpitch 
    val.targetpitch := PitchTM.asn1SccPITCH_VALUE_Init;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccKs_Context_Init;

function asn1SccKs_Context_IsConstraintValid(val : asn1SccKs_Context) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret := asn1SccKs_States_IsConstraintValid(val.state);
    if ret.Success then
        ret := PitchTM.asn1SccPITCH_SEQ_IsConstraintValid(val.pitch);
        if ret.Success then
            ret := PitchTM.asn1SccPITCH_VALUE_IsConstraintValid(val.targetpitch);
        end if;
    end if;
    return ret;
end asn1SccKs_Context_IsConstraintValid;


pragma Warnings (On, "condition can only be False if invalid values present");
pragma Warnings (On, "condition can only be True if invalid values present");

 
end Ks_Datamodel;