pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
with adaasn1rtl;


pragma Warnings (Off, "unit ""System"" is not referenced");
with System;
pragma Warnings (On, "unit ""System"" is not referenced");

pragma Warnings (Off, "use clause for package ""adaasn1rtl"" has no effect");
use adaasn1rtl;
pragma Warnings (On, "use clause for package ""adaasn1rtl"" has no effect");

pragma Warnings (Off, "use clause for type");
pragma Warnings (Off, "is already use-visible through package use clause at line");
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
pragma Warnings (On, "use clause for type");
pragma Warnings (On, "is already use-visible through package use clause at line");



package PitchTM with SPARK_Mode
is


subtype asn1SccPITCH_VALUE is adaasn1rtl.Asn1Real;


function asn1SccPITCH_VALUE_Equal(val1, val2 : asn1SccPITCH_VALUE) return Boolean;

function asn1SccPITCH_VALUE_Init return asn1SccPITCH_VALUE;

ERR_PITCH_VALUE:constant Integer := 76; 
function asn1SccPITCH_VALUE_IsConstraintValid(val : asn1SccPITCH_VALUE) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccRESOLUTION is adaasn1rtl.Asn1UInt range 10 .. 16;


function asn1SccRESOLUTION_Equal(val1, val2 : asn1SccRESOLUTION) return Boolean;

function asn1SccRESOLUTION_Init return asn1SccRESOLUTION;

ERR_RESOLUTION:constant Integer := 81; 
function asn1SccRESOLUTION_IsConstraintValid(val : asn1SccRESOLUTION) return adaasn1rtl.ASN1_RESULT;
subtype asn1SccVALIDITY_index_range is Integer range 0..1;
type asn1SccVALIDITY is (asn1Sccvalid, asn1Sccinvalid) with Size => adaasn1rtl.Enumerated_Size;
for asn1SccVALIDITY use
    (asn1Sccvalid => 0, asn1Sccinvalid => 1);

function asn1SccVALIDITY_Equal(val1, val2 : asn1SccVALIDITY) return Boolean;

function asn1SccVALIDITY_Init return asn1SccVALIDITY;

ERR_VALIDITY:constant Integer := 86; 
function asn1SccVALIDITY_IsConstraintValid(val : asn1SccVALIDITY) return adaasn1rtl.ASN1_RESULT;
-- asn1SccPITCH_SEQ --------------------------------------------

type asn1SccPITCH_SEQ is record 
    pitchVal : asn1SccPITCH_VALUE;
    res : asn1SccRESOLUTION;
    vali : asn1SccVALIDITY;
end record;


function asn1SccPITCH_SEQ_Equal(val1, val2 : asn1SccPITCH_SEQ) return Boolean;

function asn1SccPITCH_SEQ_Init return asn1SccPITCH_SEQ;

ERR_PITCH_SEQ:constant Integer := 121; 
ERR_PITCH_SEQ_PITCHVAL_2:constant Integer := 96; 
ERR_PITCH_SEQ_RES_2:constant Integer := 106; 
ERR_PITCH_SEQ_VALI_2:constant Integer := 116; 
function asn1SccPITCH_SEQ_IsConstraintValid(val : asn1SccPITCH_SEQ) return adaasn1rtl.ASN1_RESULT;
pragma Warnings (Off, "there are no others");
 
pragma Warnings (On, "there are no others");
private
   --# hide PitchTM;


end PitchTM;